{%- macro to_java_key_type(attribute) -%}
    {%- if attribute.type is template_type -%}
        {{ attribute.type | instantiated_type | map_text("java_template_key_type") }}
    {%- else -%}
        {{ attribute.type | instantiated_type | map_text("java_key_type") }}
    {%- endif %}
{%- endmacro %}
{%- macro to_java_key_factory(attribute) -%}
    {%- if attribute.type is template_type -%}
        {{ attribute.type | instantiated_type | map_text("java_template_key_factory") }}
    {%- else -%}
        {{ attribute.type | instantiated_type | map_text("java_key_factory") }}
    {%- endif %}
{%- endmacro %}
{%- set my_class_name = ctx.root_namespace | pascal_case ~ "IncubatingAttributes" -%}
{%- set stable_class_name = ctx.root_namespace | pascal_case ~ "Attributes" -%}
/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
package io.opentelemetry.semconv.incubating;

import static io.opentelemetry.api.common.AttributeKey.booleanKey;
import static io.opentelemetry.api.common.AttributeKey.doubleKey;
import static io.opentelemetry.api.common.AttributeKey.longKey;
import static io.opentelemetry.api.common.AttributeKey.stringKey;
import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;

import static io.opentelemetry.semconv.AttributeKeyTemplate.stringArrayKeyTemplate;
import static io.opentelemetry.semconv.AttributeKeyTemplate.stringKeyTemplate;

import io.opentelemetry.api.common.AttributeKey;
import io.opentelemetry.semconv.AttributeKeyTemplate;
import java.util.List;

// DO NOT EDIT, this is an Auto-generated file from buildscripts/templates/registry/incubating_java/IncubatingSemanticAttributes.java.j2
@SuppressWarnings("unused")
public final class {{ my_class_name }} {
    {% for attribute in ctx.attributes | rejectattr("name", "in", ctx.excluded_attributes) %}{% if attribute is experimental %}
    {%- if attribute is deprecated %}{%- set deprecated_javadoc = "@deprecated " ~ attribute.deprecated -%}
    {%- else -%}{%- set deprecated_javadoc = "" -%}
    {%- endif -%}
    {{ [attribute.brief, concat_if("\n\nNotes:\n\n", attribute.note), deprecated_javadoc] | comment(indent=4) }}
    {% if attribute is deprecated %}@Deprecated{% endif %} public static final {{ to_java_key_type(attribute) | trim }} {{ attribute.name | screaming_snake_case }} = {{ to_java_key_factory(attribute) | trim }}("{{ attribute.name }}");
    {% elif attribute is stable %}
    {%- set stable_class_link = "io.opentelemetry.semconv." ~ stable_class_name ~ "#" ~ (attribute.name | screaming_snake_case) -%}
    {{ [attribute.brief, concat_if("\n\nNotes:\n\n", attribute.note), "@deprecated deprecated in favor of stable {@link " ~ stable_class_link ~ "} attribute."] | comment(indent=4) }}
    @Deprecated public static final {{ to_java_key_type(attribute) | trim }} {{ attribute.name | screaming_snake_case }} = {{ to_java_key_factory(attribute) | trim }}("{{ attribute.name }}");
    {% endif %}
    {% endfor %}
    // Enum definitions
    {% for attribute in ctx.attributes | select("enum") | rejectattr("name", "in", ctx.excluded_attributes) %}    
    {%- if attribute is stable -%}
    {%- set stable_class_link = "io.opentelemetry.semconv." ~ stable_class_name ~ "." ~ (attribute.name | pascal_case) ~ "Values" -%}
    /** 
     * Values for {@link #{{ attribute.name | screaming_snake_case }}}. 
     *
     *  @deprecated deprecated in favor of stable {@link {{stable_class_link}}}.
     */
    {%- elif attribute is deprecated -%}
    {{ ["Values for {@link #" ~ attribute.name | screaming_snake_case ~ "}", "@deprecated " ~ attribute.deprecated ] | comment }}
    {%- else -%}
    /** Values for {@link #{{ attribute.name | screaming_snake_case }}}. */
    {%- endif -%}
    {% if attribute is stable or attribute is deprecated %}@Deprecated{% endif %}
    public static final class {{ attribute.name | pascal_case }}IncubatingValues {
      {%- for member in attribute.type.members %}
      {{ [member.brief or (member.id ~ '.')] | comment(indent=4) }}
      public static final {{ attribute.type | instantiated_type | map_text("java_enum_type") }} {{ member.id | screaming_snake_case }} = {{ member.value | print_member_value }};
      {%- endfor %}
      private {{ attribute.name | pascal_case }}IncubatingValues() {}
    }
    {% endfor %}

    private {{ my_class_name }}() {}
}
